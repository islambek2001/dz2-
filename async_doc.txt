Асинхронное программирование подразумевает инициацию некоторой операцию,
 об окончании которой главный поток узнает спустя некоторое время.

Н:setTimeout позволяет вызвать функцию один раз через определённый интервал времени.

window.setTimeout(function () {
    console.log('Inside timeout, after 2000 seconds')
},2000)

не входит в спецификацию JS (есть в браузере).



Event loop в JavaScript — менеджер асинхронных вызовов. Чтобы этот хитрый процесс слаженно работал,
 в JavaScript реализован механизм для управления очерёдностью исполнения кода?? .

как он работает?

Н: когда Интерпретаатор доходит до ассинхронности (Н:window.setTimeout) он отправляет его в CALL STACK
потом в WebAPIs (потому что setTimeout есть в браузере)ждем пока API выполнит метод setTimeout и
функцию которую мы регистрировали попадает в очередь CALLBACK QUEUE и по циклу попадает  в CALL STAK.


Т.е. все что что у нас синхронном режиме выполняются сразу. А асинхронном режиме чрезез определенное время.
